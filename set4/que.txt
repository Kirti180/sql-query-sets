1. Write a query to find the ride with the highest and lowest fare.
==> SELECT *
FROM Rides
WHERE fare = (
    SELECT MAX(fare)
    FROM Rides
)
OR fare = (
    SELECT MIN(fare)
    FROM Rides
);

2. Write a query to find the average fare and distance for each driver_id
==> SELECT driver_id, AVG(fare) AS average_fare, AVG(distance) AS average_distance
FROM Rides
GROUP BY driver_id;

3. Write a query to find driver_id that have completed more than 5 rides.
==> SELECT driver_id
FROM Rides
GROUP BY driver_id
HAVING COUNT(*) > 5;

4. Assuming there is another collection/table called Drivers with driver_id and name fields, write a query to find the name of the driver with the highest fare.
==> SELECT d.name
FROM Drivers d
JOIN Rides r ON d.driver_id = r.driver_id
WHERE r.fare = (
    SELECT MAX(fare)
    FROM Rides

);

5. Write a query to find the top 3 drivers who have earned the most from fares. Return the drivers' ids and total earnings
==> SELECT driver_id, SUM(fare) AS total_earnings
FROM Rides
GROUP BY driver_id
ORDER BY total_earnings DESC
LIMIT 3;

6. Assuming there's a ride_date field of date type in the Rides table / collection, write a query to find all rides that happened in the last 7 days.
==> SELECT *
FROM Rides
WHERE ride_date >= CURRENT_DATE - INTERVAL '7 days'
      AND ride_date <= CURRENT_DATE;


7. Write a query to find all rides where the end_location is not set
==> SELECT *
FROM Rides
WHERE end_location IS NULL;

8. Write a query to calculate the fare per mile for each ride and return the ride ids and their fare per mile, ordered by fare per mile in descending order.
==> SELECT id, fare / distance AS fare_per_mile
FROM Rides
ORDER BY fare_per_mile DESC;

9. Assuming there's another collection/table Passengers with passenger_id and name fields, write a query to return a list of all rides including the driver's name and passenger's name.
==> SELECT Rides.id, Drivers.name AS driver_name, Passengers.name AS passenger_name
FROM Rides
JOIN Drivers ON Rides.driver_id = Drivers.driver_id
JOIN Passengers ON Rides.passenger_id = Passengers.passenger_id;

10. Write a query to add a tip field to the Rides table / collection.
==> ALTER TABLE Rides
ADD COLUMN tip DECIMAL(6,2);

